---
title: Security Advisory 2005-08-15
canonical: security/advisory-2005-08-15
layout: security.hbs
---
                    <h3>Remote PHP Code Injection Vulnerability in phpMyFAQ 1.4.x and 1.5.x</h3>

                    <dl class="dl-horizontal">
                        <dt>Issued on:</dt>
                        <dd>2005-08-15</dd>
                        <dt>Software:</dt>
                        <dd>phpMyFAQ <= 1.4.10 and phpMyFAQ <= 1.5.0 RC6</dd>
                        <dt>Risk:</dt>
                        <dd>high</dd>
                        <dt>Platforms:</dt>
                        <dd>all</dd>
                    </dl>

                    <p>
                        The phpMyFAQ Team has learned of a serious security issue that has been discovered in our bundled
                        library XML-RPC we use in phpMyFAQ 1.4 and 1.5.
                    </p>

                    <h3>Description</h3>
                    <p>
                        The bundled XML-RPC library allow injection of arbitrary PHP code into eval() statements. This is caused
                        by an improper handling of XMLRPC requests and responses that are malformed in a certain way.
                    </p>

                    <h3>Solution</h3>
                    <p>
                        The phpMyFAQ Team has released a new phpMyFAQ version 1.4.11 and 1.5.0 RC7, which incorporate a fixed
                        bundled library XML-RPC. All users of affected phpMyFAQ versions are encouraged to upgrade as soon as
                        possible to this latest version.
                    </p>

                    <h3>Workaround</h3>
                    <p>
                        As a temporary hotfix you can delete your xmlrpc.php and xmlrpcs.php file in the directory inc/ so that
                        your FAQ will not easily allow execution of maliclius XML-RPC method calls.
                    </p>

                    <h3>Credits</h3>
                    <p>
                        The phpMyFAQ Team would like to thank Stefan Esser and the
                        <a href="http://www.hardened-php.net">Hardened-PHP Project</a> for discovering this vulnerability. The
                        Hardened-PHP Project has also released a <a href="http://www.hardened-php.net/advisory_152005.67.html">
                        more detailed advisory</a>.
                    </p>